#region Copyright
// Copyright Hitachi Consulting
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//    http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Xigadee
{
    /// <summary>
    /// This interface is for components that require boundary loggers.
    /// </summary>
    public interface IRequireBoundaryLogger
    {
        /// <summary>
        /// This is the boundary Collector?.
        /// </summary>
        IBoundaryLogger BoundaryLogger { get; set; }
    }

    /// <summary>
    /// This interface is used to log payload metadata to a central source when it transitions a channel.
    /// </summary>
    public interface IBoundaryLogger: IBoundaryLoggerBase
    {
        /// <summary>
        /// This method is used to record the success rate of a batch poll so that messages can be reconciled against the request, and polling algoritm assessed.
        /// </summary>
        /// <param name="requested">The number of messages requested.</param>
        /// <param name="actual">The actual number returned.</param>
        /// <param name="channelId">The channel id for the request.</param>
        /// <returns>Returns a trace GUID for the individual boundary listener poll.</returns> 
        Guid BoundaryBatchPoll(int requested, int actual, string channelId);
    }

    /// <summary>
    /// This is the base interface for boundary loggers.
    /// </summary>
    public interface IBoundaryLoggerBase
    {
        /// <summary>
        /// This interface is used to log payload data when a message is either incoming or outgoing from the system.
        /// </summary>
        /// <param name="direction">The direction of the message.</param>
        /// <param name="payload">The payload.</param>
        /// <param name="ex">Any exception generated by the attempt. If this is not null then you can assume that the incoming or outgoing action was not successful.</param>
        void BoundaryLog(ChannelDirection direction, TransmissionPayload payload, Exception ex = null, Guid? batchId = null);
    }

    /// <summary>
    /// This interface is implemented by BoundaryLogger components.
    /// </summary>
    public interface IBoundaryLoggerComponent: IBoundaryLoggerBase
    {
        void BoundaryLogPoll(Guid id, int requested, int actual, string channelId);
    }
}
